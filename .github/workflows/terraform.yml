name: "Terraform Infrastructure Change Management Pipeline with GitHub Actions"

on: 
  push: 
    branches:
    - main
    paths:
    - terraform/**
  pull_request:
    branches:
    - main
    paths:
    - terraform/**

env: 
  TF_LOG: INFO
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  S3_BUCKET_NAME: tfstate-bucket-rhai-poc
  AWS_REGION: us-east-2

jobs:
  terraform:
    name: "Terraform Infrastructure Change Management"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    defaults:
      run:
        shell: bash
        # We keep Terraform files in the terraform directory.
        working-directory: ./terraform

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v2
      - name: Configure user_data and/or remote_exec provisioner
        run: |
          perl -pi -e 's/<organization_ID>/${{ secrets.ORG_ID }}/' main.tf
          perl -pi -e 's/<activation_key_name>/${{ secrets.ACTIVATION_KEY }}/' main.tf
          perl -pi -e 's/<source_ip>/${{ secrets.SOURCE_IP }}/g' main.tf


      - name: Check if S3 bucket exists
        id: check-bucket
        run: |
          if ! aws --region ${{ env.AWS_REGION }} s3api head-bucket --bucket ${{ env.S3_BUCKET_NAME }}; then
            echo "Bucket does not exist. Creating..."
            exit 1
          fi
        continue-on-error: true

      - name: Create S3 bucket if it does not exist
        if: steps.check-bucket.outcome == 'failure'
        run: |
          aws --region ${{ env.AWS_REGION }} s3api create-bucket \
            --bucket ${{ env.S3_BUCKET_NAME }} \
            --create-bucket-configuration LocationConstraint=${{ env.AWS_REGION }}

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}


      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
      
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=${{ env.S3_BUCKET_NAME }}"
      
      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
      
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
  
            <details><summary>Show Plan</summary>
  
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
  
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
            });

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
      